{"version":3,"sources":["utils/fetchClient.ts","utils/FetchLoadErrors.ts","api/images.ts","components/ImageModal/ImageModal.tsx","components/SearchInput/SearchInput.tsx","utils/searchHelper.ts","components/Logo/Logo.tsx","components/Search/Search.tsx","components/ImageItem/ImageItem.tsx","components/Pagination/Pagination.tsx","components/ImagesDisplayControl/ImagesDisplayControl.tsx","components/Gallery/Gallery.tsx","pages/SearchPage/SearchPage.tsx","components/Header/Header.tsx","pages/HomePage/HomePage.tsx","pages/CollectionPage/CollectionPage.tsx","App.tsx","index.tsx"],"names":["BASE_URL","FetchLoadErrors","client","url","data","options","method","body","JSON","stringify","headers","fetch","then","response","ok","Error","json","request","apiKey","process","photo_url","search_url","getImages","page","searchImages","query","ImageModal","pathname","useLocation","useState","image","setImage","loadImage","a","imageFromServer","UNABLE_LOAD_ONE","useEffect","urls","className","src","user","profile_image","medium","alt","name","downloads","likes","views","regular","alt_description","tags","slice","map","tag","to","title","SearchInput","onSearch","type","placeholder","value","onChange","e","target","required","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","delete","Array","isArray","part","append","set","Logo","memo","version","xmlns","width","height","viewBox","preserveAspectRatio","transform","fill","stroke","d","Search","searchQuery","setSearchQuery","useSearchParams","searchParams","setSearchParams","navigate","useNavigate","get","handleSubmit","event","preventDefault","Number","onSubmit","ImageItem","id","small","Pagination","currentPage","limitOfPageCount","Math","ceil","total","pageCounts","i","push","pagesToShow","length","search","onClick","window","scrollTo","p","cn","ImagesDisplayControl","columnsCount","onChangeColumnsCount","Select","sx","bgcolor","padding","variant","MenuProps","PaperProps","MenuItem","Gallery","images","onChangeColumn","columnsCountBreakPoints","useMemo","350","500","900","gutter","SearchPage","setImages","setColumnsCount","loadImages","searchedImages","UNABLE_SEARCH","results","Header","displayName","HomePage","imagesFromServer","UNABLE_LOAD","CollectionPage","tagName","split","pop","App","path","element","replace","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b8a8156.chunk.js","sourcesContent":["const BASE_URL = 'https://api.unsplash.com/';\n\ntype RequestMethod = 'GET';\n\nfunction request<T>(\n  url = '',\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n};\n","// eslint-disable-next-line no-shadow\nexport enum FetchLoadErrors {\n  UNABLE_SEARCH = 'Unable to search images',\n  UNABLE_LOAD = 'Unable to load images',\n  UNABLE_LOAD_ONE = 'Unable to load one images'\n}\n","import { client } from '../utils/fetchClient';\nimport { Image } from '../types/Image';\nimport { SearchResponse } from '../types/SearchResponse';\n\nconst apiKey = process.env.REACT_APP_ACCESS_KEY;\nconst photo_url = `photos?client_id=${apiKey}`;\nconst search_url = `search/photos?&client_id=${apiKey}`;\n\nexport const getImages = (page = 1) => {\n  return client.get<Image[]>(`${photo_url}&page=${page}`);\n};\n\nexport const searchImages = (query: string, page: number) => {\n  return client.get<SearchResponse>(`${search_url}&query=${query}&page=${page}`);\n};\n\nexport const getOneImage = (url: string) => {\n  return client.get<Image>(`${url}/?client_id=${apiKey}`);\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Image } from '../../types/Image';\nimport { getOneImage } from '../../api/images';\nimport { FetchLoadErrors } from '../../utils/FetchLoadErrors';\n\nexport const ImageModal: FC = () => {\n  const { pathname } = useLocation();\n  const [image, setImage] = useState<Image | null>(null);\n  const loadImage = async () => {\n    try {\n      const imageFromServer = await getOneImage(pathname);\n\n      setImage(imageFromServer);\n    } catch {\n      throw new Error(FetchLoadErrors.UNABLE_LOAD_ONE);\n    }\n  };\n\n  useEffect(() => {\n    loadImage();\n  }, []);\n\n  if (!image || !image.urls) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal__content\">\n        <div className=\"modal__user\">\n          <img\n            src={image.user.profile_image.medium}\n            alt={image.user.name}\n            className=\"modal__user-img\"\n          />\n\n          <div>\n            {image.user.name}\n          </div>\n        </div>\n\n        <div className=\"modal__info\">\n          <div>\n            {`Downloads: ${image.downloads}`}\n          </div>\n\n          <div>\n            {`Likes: ${image.likes}`}\n          </div>\n\n          <div>\n            {`Views: ${image.views}`}\n          </div>\n        </div>\n\n      </div>\n\n      <img\n        src={image.urls.regular}\n        alt={image.alt_description}\n        className=\"modal__image\"\n      />\n\n      <div className=\"modal__tags\">\n        {image.tags.slice(0, 5).map(tag => (\n          <Link\n            key={tag.title}\n            to={`/collection/${tag.title}`}\n            className=\"modal__tag-link\"\n          >\n            {tag.title}\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  query: string;\n  onSearch: (query: string) => void;\n}\n\nexport const SearchInput: FC<Props> = ({ query, onSearch }) => (\n  <input\n    type=\"text\"\n    name=\"search\"\n    className=\"search__input\"\n    placeholder=\"Search high-resolution images\"\n    value={query}\n    onChange={(e) => onSearch(e.target.value)}\n    required\n    title=\"Search Unsplash\"\n  />\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import React, { FC, memo } from 'react';\n\nexport const Logo: FC = memo(() => (\n  <svg\n    version=\"1.0\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"512.000000pt\"\n    height=\"512.000000pt\"\n    viewBox=\"0 0 512.000000 512.000000\"\n    preserveAspectRatio=\"xMidYMid meet\"\n  >\n\n    <g\n      transform=\"translate(0.000000,512.000000) scale(0.100000,-0.100000)\"\n      fill=\"#000000\"\n      stroke=\"none\"\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d=\"M1812 3948 l3 -533 745 0 745 0 3 533 2 532 -750 0 -750 0 2 -532z\" />\n      <path d=\"M640 1705 l0 -1065 1920 0 1920 0 0 1065 0 1065 -585 0 -585 0 0\n-530 0 -530 -750 0 -750 0 0 530 0 530 -585 0 -585 0 0 -1065z\"\n      />\n    </g>\n  </svg>\n\n));\n","import React, {\n  FC, FormEvent, memo, useEffect, useState,\n} from 'react';\nimport { Link, useNavigate, useSearchParams } from 'react-router-dom';\nimport { SearchInput } from '../SearchInput';\nimport { searchImages } from '../../api/images';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { Logo } from '../Logo';\n\nexport const Search: FC = memo(() => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  const query = searchParams.get('query') || '';\n  const page = searchParams.get('page') || '1';\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    try {\n      await searchImages(query, Number(page));\n\n      if (query !== searchQuery) {\n        setSearchParams(getSearchWith(\n          searchParams,\n          { query: searchQuery || null },\n        ));\n      }\n\n      navigate(`/search?query=${searchQuery}`);\n    } catch {\n      throw new Error('Unable to Search Images');\n    }\n  };\n\n  useEffect(() => {\n    return (() => {\n      getSearchWith(searchParams, { query: null });\n    });\n  }, [searchParams]);\n\n  return (\n    <div className=\"search\">\n      <form\n        className=\"search__form\"\n        onSubmit={handleSubmit}\n      >\n        <Link\n          to=\"/\"\n          className=\"logo\"\n        >\n          <Logo />\n        </Link>\n\n        <SearchInput\n          query={searchQuery}\n          onSearch={setSearchQuery}\n        />\n\n        <button\n          type=\"submit\"\n          className=\"search__button\"\n          title=\"Search\"\n        >\n          Search\n        </button>\n      </form>\n    </div>\n  );\n});\n","import React, { FC, memo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image } from '../../types/Image';\n\ninterface Props {\n  image: Image,\n}\nexport const ImageItem: FC<Props> = memo(({ image }) => {\n  return (\n    <div className=\"gallery__image-container\">\n      <Link\n        to={`/photos/${image.id}`}\n        className=\"gallery__image-link\"\n      >\n        <img\n          key={image.id}\n          src={image.urls.small}\n          alt={image.alt_description}\n        />\n      </Link>\n    </div>\n  );\n});\n","import React, { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../../utils/searchHelper';\n\nexport const Pagination: FC = memo(() => {\n  const [searchParams] = useSearchParams();\n  const currentPage = Number(searchParams.get('page')) || 1;\n  const total = 100;\n  const perPage = 10;\n\n  const limitOfPageCount = Math.ceil(total / perPage);\n  const pageCounts = [];\n\n  // eslint-disable-next-line no-plusplus\n  for (let i = 1; i <= limitOfPageCount; i++) {\n    pageCounts.push(i);\n  }\n\n  let pagesToShow\n        = currentPage <= 2\n          ? pageCounts.slice(0, 4)\n          : pageCounts.slice(currentPage - 2, currentPage + 2);\n\n  pagesToShow\n        = currentPage >= pageCounts.length - 2\n      ? pageCounts.slice(pageCounts.length - 4, pageCounts.length)\n      : pagesToShow;\n  if (pagesToShow.length < 4) {\n    pagesToShow = pageCounts.slice(0);\n  }\n\n  // const isFirstPage = currentPage === 1;\n  // const isLastPage = currentPage === pageCounts.length;\n\n  return (\n    <div className=\"pagination\">\n      <Link\n        className=\"pagination__button-prev pagination__button\"\n        to={{\n          search: getSearchWith(\n            searchParams, { page: (currentPage - 1).toString() },\n          ),\n        }}\n        onClick={() => window.scrollTo(0, 0)}\n      >\n      </Link>\n      {pagesToShow.map(p => (\n        <Link\n          key={p}\n          className={cn('pagination__button', {\n            'is-active': currentPage === p,\n          })}\n          to={{\n            search: getSearchWith(\n              searchParams, { page: (currentPage).toString() },\n            ),\n          }}\n          onClick={() => window.scrollTo(0, 0)}\n        >\n          {p}\n        </Link>\n      ))}\n      <Link\n        className=\"pagination__button-next pagination__button\"\n        to={{\n          search: getSearchWith(\n            searchParams, { page: (currentPage + 1).toString() },\n          ),\n        }}\n        onClick={() => window.scrollTo(0, 0)}\n      >\n      </Link>\n    </div>\n  );\n});\n","import { MenuItem, Select } from '@mui/material';\nimport React, { FC } from 'react';\n\ninterface Props {\n  columnsCount: number,\n  onChangeColumnsCount: (column: number) => void;\n}\nexport const ImagesDisplayControl: FC<Props> = ({\n  columnsCount,\n  onChangeColumnsCount,\n}) => {\n  return (\n    <div className=\"gallery__dropdown\">\n      <Select\n        sx={\n          {\n            bgcolor: 'white',\n            width: 176,\n            height: 40,\n            padding: 2,\n          }\n        }\n        variant=\"standard\"\n        value={columnsCount}\n        onChange={(e) => onChangeColumnsCount(+e.target.value)}\n        MenuProps={{\n          PaperProps: {\n            sx: {\n              bgcolor: '#fff',\n            },\n          },\n        }}\n      >\n        <MenuItem value={3}>3 Columns</MenuItem>\n        <MenuItem value={5}>5 Columns</MenuItem>\n      </Select>\n    </div>\n  );\n};\n","import React, {\n  FC, useMemo,\n} from 'react';\n\nimport Masonry, { ResponsiveMasonry } from 'react-responsive-masonry';\nimport { ImageItem } from '../ImageItem';\nimport { Pagination } from '../Pagination';\nimport { ImagesDisplayControl } from '../ImagesDisplayControl';\nimport { Image } from '../../types/Image';\n\ninterface Props {\n  images: Image[];\n  columnsCount: number;\n  onChangeColumn: (column: number) => void;\n}\nexport const Gallery: FC<Props> = ({\n  images,\n  columnsCount,\n  onChangeColumn,\n}) => {\n  const columnsCountBreakPoints = useMemo(() => {\n    return {\n      350: 1,\n      500: 2,\n      900: columnsCount,\n    };\n  }, [columnsCount]);\n\n  return (\n    <div className=\"container\">\n      <section className=\"gallery\">\n        <ImagesDisplayControl\n          columnsCount={columnsCount}\n          onChangeColumnsCount={onChangeColumn}\n        />\n\n        <ResponsiveMasonry\n          columnsCountBreakPoints={columnsCountBreakPoints}\n          className=\"gallery__container\"\n        >\n          <Masonry gutter=\"20px\">\n            {images?.map(image => (\n              <ImageItem\n                key={image.id}\n                image={image}\n              />\n            ))}\n          </Masonry>\n        </ResponsiveMasonry>\n\n        <Pagination />\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Search } from '../../components/Search';\nimport { searchImages } from '../../api/images';\nimport { Gallery } from '../../components/Gallery';\nimport { SearchResponse } from '../../types/SearchResponse';\nimport { FetchLoadErrors } from '../../utils/FetchLoadErrors';\n\nexport const SearchPage = () => {\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const page = searchParams.get('page') || '1';\n  const [images, setImages] = useState<SearchResponse | null>(null);\n  const [columnsCount, setColumnsCount] = useState(3);\n\n  const loadImages = async () => {\n    try {\n      const searchedImages = await searchImages(query, +page);\n\n      setImages(searchedImages);\n    } catch {\n      throw new Error(FetchLoadErrors.UNABLE_SEARCH);\n    }\n  };\n\n  useEffect(() => {\n    searchParams.set('page', '1');\n  }, [query]);\n\n  useEffect(() => {\n    loadImages();\n  }, [query, page]);\n\n  if (!images) {\n    return null;\n  }\n\n  return (\n    <section className=\"searching-page\">\n      <Search />\n\n      <Gallery\n        images={images.results}\n        columnsCount={columnsCount}\n        onChangeColumn={setColumnsCount}\n      />\n    </section>\n  );\n};\n","import React, { FC, memo } from 'react';\nimport { Search } from '../Search';\n\nexport const Header: FC = memo(() => {\n  return (\n    <header className=\"header\">\n      <div className=\"header__content\">\n        <Search />\n      </div>\n    </header>\n  );\n});\n\nHeader.displayName = 'Header';\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Header } from '../../components/Header';\nimport { Gallery } from '../../components/Gallery';\nimport { getImages } from '../../api/images';\nimport { Image } from '../../types/Image';\nimport { FetchLoadErrors } from '../../utils/FetchLoadErrors';\n\nexport const HomePage = () => {\n  const [images, setImages] = useState<Image[]>([]);\n  const [columnsCount, setColumnsCount] = useState(3);\n  const [searchParams] = useSearchParams();\n  const page = searchParams.get('page') || '1';\n\n  const loadImages = async () => {\n    try {\n      const imagesFromServer = await getImages(+page);\n\n      setImages(imagesFromServer);\n    } catch (e) {\n      throw new Error(FetchLoadErrors.UNABLE_LOAD);\n    }\n  };\n\n  useEffect(() => {\n    loadImages();\n  }, [page]);\n\n  return (\n    <>\n      <Header />\n\n      <Gallery\n        images={images}\n        columnsCount={columnsCount}\n        onChangeColumn={setColumnsCount}\n      />\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { searchImages } from '../../api/images';\nimport { Gallery } from '../../components/Gallery';\nimport { SearchResponse } from '../../types/SearchResponse';\nimport { FetchLoadErrors } from '../../utils/FetchLoadErrors';\n\nexport const CollectionPage = () => {\n  const { pathname } = useLocation();\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const page = searchParams.get('page') || '1';\n  const [images, setImages] = useState<SearchResponse | null>(null);\n  const [columnsCount, setColumnsCount] = useState(3);\n\n  const loadImages = async () => {\n    try {\n      const tagName = pathname.split('/').pop() || '';\n      const searchedImages = await searchImages(tagName, +page);\n\n      setImages(searchedImages);\n    } catch {\n      throw new Error(FetchLoadErrors.UNABLE_SEARCH);\n    }\n  };\n\n  useEffect(() => {\n    searchParams.set('page', '1');\n  }, [query]);\n\n  useEffect(() => {\n    loadImages();\n  }, [query, page]);\n\n  if (!images) {\n    return null;\n  }\n\n  return (\n    <>\n      <h1>Collection</h1>\n\n      <Gallery\n        images={images.results}\n        columnsCount={columnsCount}\n        onChangeColumn={setColumnsCount}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { ImageModal } from './components/ImageModal';\nimport { SearchPage } from './pages/SearchPage';\nimport { HomePage } from './pages/HomePage';\nimport { CollectionPage } from './pages/CollectionPage';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Routes>\n        <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n        <Route path=\"/\" element={<HomePage />} />\n\n        <Route path=\"/photos\">\n          <Route index element={<HomePage />} />\n          <Route path=\":id\" element={<ImageModal />} />\n        </Route>\n\n        <Route path=\"/collection\" element={<CollectionPage />}>\n          <Route path=\":tag\" element={<CollectionPage />} />\n        </Route>\n\n        <Route path=\"/search\" element={<SearchPage />}>\n          <Route index element={<SearchPage />} />\n        </Route>\n\n        <Route path=\"*\" element={<h1>Page not Fount</h1>} />\n      </Routes>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}